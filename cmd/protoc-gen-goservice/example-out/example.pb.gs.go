// Code generated by protoc-gen-go_service. DO NOT EDIT.
// versions:
//	protoc	v3.12.3

package v1

import (
	"context"
	"github.com/easeq/go-service/client"
)

type ShopifyServiceGSClient interface {
	Auth(ctx context.Context, in *ShopifyAuthRequest, opts ...client.CallOption) (*Response, error)

	NoReturn(ctx context.Context, in *ShopifyAuthRequest, opts ...client.CallOption) (*Empty, error)

	AuthCallback(ctx context.Context, in *ShopifyAuthCallbackRequest, opts ...client.CallOption) (*Response, error)

	DataSync(ctx context.Context, in *ShopifyDataSyncRequest, opts ...client.CallOption) (client.StreamClient, error)

	DataSyncStreamClient(ctx context.Context, in *ShopifyDataSyncRequest, opts ...client.CallOption) (client.StreamClient, error)

	DataSyncStreamBiDirectional(ctx context.Context, in *ShopifyDataSyncRequest, opts ...client.CallOption) (client.StreamClient, error)
}

type shopifyServiceGSClient struct {
	name string
	opts []client.DialOption
	client.Client
}

func NewShopifyServiceGSClient(name string, client client.Client, opts ...client.DialOption) ShopifyServiceGSClient {
	return &shopifyServiceGSClient{name, opts, client}
}

func (sc *shopifyServiceGSClient) GetServiceName() string {
	return sc.name
}

func (sc *shopifyServiceGSClient) GetDialOptions() []client.DialOption {
	return sc.opts
}

func (sc *shopifyServiceGSClient) Auth(ctx context.Context, in *ShopifyAuthRequest, opts ...client.CallOption) (*Response, error) {
	res := new(Response)
	err := sc.Call(ctx, sc, "/v1.ShopifyService/Auth", in, res, opts...)
	if err != nil {
		return nil, err
	}

	return res, nil
}

func (sc *shopifyServiceGSClient) NoReturn(ctx context.Context, in *ShopifyAuthRequest, opts ...client.CallOption) (*Empty, error) {
	res := new(Empty)
	err := sc.Call(ctx, sc, "/v1.ShopifyService/NoReturn", in, res, opts...)
	if err != nil {
		return nil, err
	}

	return res, nil
}

func (sc *shopifyServiceGSClient) AuthCallback(ctx context.Context, in *ShopifyAuthCallbackRequest, opts ...client.CallOption) (*Response, error) {
	res := new(Response)
	err := sc.Call(ctx, sc, "/v1.ShopifyService/AuthCallback", in, res, opts...)
	if err != nil {
		return nil, err
	}

	return res, nil
}

func (sc *shopifyServiceGSClient) DataSync(ctx context.Context, in *ShopifyDataSyncRequest, opts ...client.CallOption) (client.StreamClient, error) {
	stream, err := sc.Stream(ctx, sc, &_ShopifyService_serviceDesc.Streams[0], "/v1.ShopifyService/DataSync", in, opts...)
	if err != nil {
		return nil, err
	}

	return stream, nil
}

func (sc *shopifyServiceGSClient) DataSyncStreamClient(ctx context.Context, in *ShopifyDataSyncRequest, opts ...client.CallOption) (client.StreamClient, error) {
	stream, err := sc.Stream(ctx, sc, &_ShopifyService_serviceDesc.Streams[1], "/v1.ShopifyService/DataSyncStreamClient", in, opts...)
	if err != nil {
		return nil, err
	}

	return stream, nil
}

func (sc *shopifyServiceGSClient) DataSyncStreamBiDirectional(ctx context.Context, in *ShopifyDataSyncRequest, opts ...client.CallOption) (client.StreamClient, error) {
	stream, err := sc.Stream(ctx, sc, &_ShopifyService_serviceDesc.Streams[2], "/v1.ShopifyService/DataSyncStreamBiDirectional", in, opts...)
	if err != nil {
		return nil, err
	}

	return stream, nil
}
