// Code generated by protoc-gen-go_service. DO NOT EDIT.
// versions:
//	protoc	v3.12.3

package example

import (
	"context"
	"os"

	"github.com/easeq/go-service/client"
	"github.com/easeq/go-service/server"
)

type ExampleServiceGSClient interface {
	Unary(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	NoReturn(ctx context.Context, in *Empty, opts ...client.CallOption) (*Empty, error)
	ServerStream(ctx context.Context, in *Request, opts ...client.CallOption) (client.StreamClient, error)
	ClientStream(ctx context.Context, in *Request, opts ...client.CallOption) (client.StreamClient, error)
	BiDirectionalStream(ctx context.Context, in *Request, opts ...client.CallOption) (client.StreamClient, error)
}

type exampleServiceGSClient struct {
	name string
	opts []client.DialOption
	client.Client
}

func NewExampleServiceGSClient(name string, client client.Client, opts ...client.DialOption) ExampleServiceGSClient {
	return &exampleServiceGSClient{name, opts, client}
}

func (sc *exampleServiceGSClient) GetServiceName() string {
	return sc.name
}

func (sc *exampleServiceGSClient) GetDialOptions() []client.DialOption {
	return sc.opts
}

func (sc *exampleServiceGSClient) Unary(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	res := new(Response)
	err := sc.Call(ctx, sc, "/example.ExampleService/Unary", in, res, opts...)
	if err != nil {
		return nil, err
	}

	return res, nil
}

func (sc *exampleServiceGSClient) NoReturn(ctx context.Context, in *Empty, opts ...client.CallOption) (*Empty, error) {
	res := new(Empty)
	err := sc.Call(ctx, sc, "/example.ExampleService/NoReturn", in, res, opts...)
	if err != nil {
		return nil, err
	}

	return res, nil
}

func (sc *exampleServiceGSClient) ServerStream(ctx context.Context, in *Request, opts ...client.CallOption) (client.StreamClient, error) {
	stream, err := sc.Stream(ctx, sc, &_ExampleService_serviceDesc.Streams[0], "/example.ExampleService/ServerStream", in, opts...)
	if err != nil {
		return nil, err
	}

	return stream, nil
}

func (sc *exampleServiceGSClient) ClientStream(ctx context.Context, in *Request, opts ...client.CallOption) (client.StreamClient, error) {
	stream, err := sc.Stream(ctx, sc, &_ExampleService_serviceDesc.Streams[1], "/example.ExampleService/ClientStream", in, opts...)
	if err != nil {
		return nil, err
	}

	return stream, nil
}

func (sc *exampleServiceGSClient) BiDirectionalStream(ctx context.Context, in *Request, opts ...client.CallOption) (client.StreamClient, error) {
	stream, err := sc.Stream(ctx, sc, &_ExampleService_serviceDesc.Streams[2], "/example.ExampleService/BiDirectionalStream", in, opts...)
	if err != nil {
		return nil, err
	}

	return stream, nil
}

// Add the tags to the registry
func AddRegistryTags(server server.Server) {
	tags := []string{
		"traefik.http.routers.service-name-unique.rule=Host(`" + os.Getenv("BASE_URL") + "`) && PathPrefix('/your/path/with/or/without/prefix')",
		"traefik.http.middlewares.service-name-unique-stripprefix.stripprefix.prefixes=/your/prefix/path",
		"traefik.http.routers.service-name-unique.middlewares=service-name-unique-stripprefix@docker",
	}

	if len(tags) > 0 {
		tags = append(tags, "traefik.enable=true")
	}

	server.SetTags(tags...)
}
